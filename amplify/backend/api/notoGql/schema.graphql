type User
  @model(queries: { list: null })
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "id"
        provider: userPools
        operations: [read, update]
      }
      { allow: private, provider: iam, operations: [read, create, delete] }
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
}

type Note
  @model(subscriptions: { level: public })
  @auth(
    rules: [
      { allow: owner, ownerField: "authorId", provider: userPools }
      { allow: private, provider: userPools, operations: [read] }
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  content: String!
  authorId: ID
    @index(
      name: "notesByAuthorAndDate"
      queryField: "notesByAuthorAndDate"
      sortKeyFields: ["updatedAt"]
    )
  author: User @hasOne(fields: ["authorId"])
  favoriteCount: Int
    @default(value: "0")
    @auth(
      rules: [
        { allow: owner, ownerField: "authorId", provider: userPools }
        { allow: private, provider: userPools, operations: [read] }
        { allow: private, provider: iam }
        { allow: public, provider: iam, operations: [read] }
      ]
    )
  type: String!
    @index(
      name: "notesByDate"
      queryField: "notesByDate"
      sortKeyFields: ["updatedAt"]
    )
  updatedAt: AWSDateTime!
}

type Favorite
  @model(
    mutations: {
      create: "createFavorite"
      delete: "deleteFavorite"
      update: null
    }
    timestamps: { createdAt: "createdAt", updatedAt: null }
  )
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "userId"
        provider: userPools
        operations: [read]
      }
      { allow: private, provider: iam, operations: [read, create, delete] }
    ]
  ) {
  userId: ID!
    @primaryKey(sortKeyFields: ["noteId"])
    @index(
      name: "favoritesByDate"
      queryField: "favoritesByDate"
      sortKeyFields: ["createdAt"]
    )
  noteId: ID!
  createdAt: AWSDateTime!
  note: Note @hasOne(fields: ["noteId"])
}

type ChangeFavorite {
  noteId: ID!
  isFavorite: Boolean!
}

type Mutation {
  changeFavorite(input: ChangeFavoriteInput!): ChangeFavorite
    @function(name: "favorite-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])
}

input ChangeFavoriteInput {
  noteId: ID!
  isFavorite: Boolean!
}
