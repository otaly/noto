type User
  @model(queries: { list: null })
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "id"
        provider: userPools
        operations: [read, update]
      }
      { allow: private, provider: userPools, operations: [read] }
      { allow: private, provider: iam, operations: [read, create, delete] }
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
}

type Note
  @model(queries: { get: "getNote" }, subscriptions: { level: public })
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "authorId"
        provider: userPools
        operations: [read, delete]
      }
      { allow: private, provider: userPools, operations: [read] }
      { allow: private, provider: iam, operations: [read, create, update] }
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  markdown: String!
  html: String!
  authorId: ID
    @index(
      name: "notesByAuthorAndDate"
      queryField: "notesByAuthorAndDate"
      sortKeyFields: ["updatedAt"]
    )
  author: User @hasOne(fields: ["authorId"])
  favoriteCount: Int @default(value: "0")
  type: String!
    @index(
      name: "notesByDate"
      queryField: "notesByDate"
      sortKeyFields: ["updatedAt"]
    )
  updatedAt: AWSDateTime!
}

type Favorite
  @model(
    queries: { list: "listFavorites" }
    mutations: {
      create: "createFavorite"
      delete: "deleteFavorite"
      update: null
    }
    timestamps: { createdAt: "createdAt", updatedAt: null }
  )
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "userId"
        provider: userPools
        operations: [read]
      }
      { allow: private, provider: iam, operations: [read, create, delete] }
    ]
  ) {
  userId: ID!
    @primaryKey(sortKeyFields: ["noteId"])
    @index(
      name: "favoritesByDate"
      queryField: "favoritesByDate"
      sortKeyFields: ["createdAt"]
    )
  noteId: ID! @index(name: "favoritesByNoteId", queryField: "favoritesByNoteId")
  createdAt: AWSDateTime!
  note: Note @hasOne(fields: ["noteId"])
}

type ChangeFavorite {
  noteId: ID!
  isFavorite: Boolean!
}

type Mutation {
  changeFavorite(input: ChangeFavoriteInput!): ChangeFavorite
    @function(name: "favorite-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])
  createNoteForClient(input: CreateNoteForClientInput!): Note
    @function(name: "note-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])
  updateNoteForClient(input: UpdateNoteForClientInput!): Note
    @function(name: "note-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])
  previewMD(markdown: String!): String! @function(name: "convertMD-${env}")
}

input CreateNoteForClientInput {
  title: String!
  markdown: String!
}

input UpdateNoteForClientInput {
  id: ID!
  title: String!
  markdown: String!
}

input ChangeFavoriteInput {
  noteId: ID!
  isFavorite: Boolean!
}

type Subscription {
  # Noteに@authで複数ルール設定しているとsubscriptions: { level: public }でSubscriptionが自動生成されない。
  # 参考: https://github.com/aws-amplify/amplify-cli/issues/2715#issuecomment-553550734
  onCreateNote: Note
    @aws_subscribe(mutations: ["createNote"])
    @aws_iam
    @aws_cognito_user_pools
  onUpdateNote: Note
    @aws_subscribe(mutations: ["updateNote"])
    @aws_iam
    @aws_cognito_user_pools
  onDeleteNote: Note
    @aws_subscribe(mutations: ["deleteNote"])
    @aws_iam
    @aws_cognito_user_pools
}
